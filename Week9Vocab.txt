Dorothy Hunt - Week 9 Vocabulary (8/24/2015)

• Exceptions - An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions.  Exceptions are created by using the throw keyword.

• Exception Handling - After a method throws an exception, the runtime system attempts to find something to handle it. The C# language's exception handling features help you deal with any unexpected or exceptional situations that occur when a program is running. Exception handling is a mechanism, which allows exceptions to be thrown and caught.

• Exceptions Hierarchy - There are two types of exceptions: exceptions generated by an executing program, and exceptions generated by the common language runtime. There is a hierarchy of exceptions that can be thrown by either an application or the runtime.

• Stack - Represents a simple last-in-first-out (LIFO) non-generic collection of objects.

• Stack Trace - The stack trace contains detailed information about the exception including where exactly it occurred in the program. 

• Stack Push - Inserts an object at the top of the Stack.

• Stack Pop / Pull - Removes and returns the object at the top of the Stack.

• Compile (a program) – The process of creating an executable program from code written in a compiled programming language.

• Debug - The process of locating and fixing or bypassing bugs, or errors, in a computer program code.

• Throw an Exception - Creating an exception object and handing it to the runtime system is called throwing an exception. Exceptions in C# are thrown using the keyword throw.

• Catch an Exception - After a method throws an exception, CLR is looking for an exception handler that can process the error.

• Application Exception - Base class for application-defined exceptions. Exceptions thrown by the applications we develop. Application exceptions are defined by application developers and are used by the application software.

• System Exception - Base class for system exceptions namespace. Exceptions thrown by the runtime. System exceptions are defined in .NET libraries and are used by the framework.

• IO Exception - The exception that is thrown when an I/O (input/output) error occurs.

• Nested Exceptions – The action of handling an exception inside of another exception.

• Inner Exception – AKA Nested Exception.

• Wrapped Exception - AKA Nested Exception.

• Internal Exception - AKA Nested Exception.

• Dispose Pattern – Pattern which is used to handle resource cleanup and prevent resource leaks in runtime environments that use automatic garbage collection. The dispose pattern works by giving an object a method (Dispose()) which frees any resources the object is holding onto.

• Null - null keyword is a literal that represents a null reference, one that does not refer to any object. Null is the default value of reference-type variables.

• Try - The try block contains the guarded code that may cause the exception. 

• Catch - The catch block catches all exceptions regardless of their type and deals with exceptional circumstances (handles exceptions).

• Finally - The code within the finally block is always executed, no matter how the program flow leaves the try block. Great way of releasing the resources used in the code.

• Error Message – The user-friendly way to notify the user for problems (after handling exceptions, you visualize them, or show the error to the user).

